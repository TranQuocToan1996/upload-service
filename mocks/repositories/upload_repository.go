// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	models "upload_service/models"

	mock "github.com/stretchr/testify/mock"

	repositories "upload_service/repositories"
)

// UploadRepository is an autogenerated mock type for the UploadRepository type
type UploadRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: upload
func (_m *UploadRepository) Create(upload *models.Upload) error {
	ret := _m.Called(upload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Upload) error); ok {
		r0 = rf(upload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByFilter provides a mock function with given fields: filter
func (_m *UploadRepository) GetByFilter(filter repositories.GetUploadFilter) ([]models.Upload, int64, error) {
	ret := _m.Called(filter)

	var r0 []models.Upload
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(repositories.GetUploadFilter) ([]models.Upload, int64, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(repositories.GetUploadFilter) []models.Upload); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Upload)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.GetUploadFilter) int64); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(repositories.GetUploadFilter) error); ok {
		r2 = rf(filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: id
func (_m *UploadRepository) GetByID(id uint) (*models.Upload, error) {
	ret := _m.Called(id)

	var r0 *models.Upload
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Upload, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Upload); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Upload)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: uploadID, status
func (_m *UploadRepository) UpdateStatus(uploadID uint, status models.UploadStatus) (int64, error) {
	ret := _m.Called(uploadID, status)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, models.UploadStatus) (int64, error)); ok {
		return rf(uploadID, status)
	}
	if rf, ok := ret.Get(0).(func(uint, models.UploadStatus) int64); ok {
		r0 = rf(uploadID, status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(uint, models.UploadStatus) error); ok {
		r1 = rf(uploadID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUploadRepository creates a new instance of UploadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUploadRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UploadRepository {
	mock := &UploadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
